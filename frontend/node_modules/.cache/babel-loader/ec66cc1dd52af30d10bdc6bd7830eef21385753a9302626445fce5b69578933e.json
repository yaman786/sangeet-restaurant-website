{"ast":null,"code":"import { selectAxisWithScale } from './state/selectors/axisSelectors';\nimport { useAppSelector } from './state/hooks';\nimport { useIsPanorama } from './context/PanoramaContext';\nimport { selectActiveLabel, selectActiveTooltipDataPoints } from './state/selectors/tooltipSelectors';\nimport { selectChartOffset } from './state/selectors/selectChartOffset';\nimport { selectPlotArea } from './state/selectors/selectPlotArea';\nexport var useXAxis = xAxisId => {\n  var isPanorama = useIsPanorama();\n  return useAppSelector(state => selectAxisWithScale(state, 'xAxis', xAxisId, isPanorama));\n};\nexport var useYAxis = yAxisId => {\n  var isPanorama = useIsPanorama();\n  return useAppSelector(state => selectAxisWithScale(state, 'yAxis', yAxisId, isPanorama));\n};\n\n/**\n * Returns the active tooltip label. The label is one of the values from the chart data,\n * and is used to display in the tooltip content.\n *\n * Returns undefined if there is no active user interaction or if used outside a chart context\n *\n * @returns string | undefined\n */\nexport var useActiveTooltipLabel = () => {\n  return useAppSelector(selectActiveLabel);\n};\n\n/**\n * Offset defines the blank space between the chart and the plot area.\n * This blank space is occupied by supporting elements like axes, legends, and brushes.\n * This also includes any margins that might be applied to the chart.\n *\n * @returns Offset of the chart in pixels, or undefined if used outside a chart context.\n */\nexport var useOffset = () => {\n  return useAppSelector(selectChartOffset);\n};\n\n/**\n * Plot area is the area where the actual chart data is rendered.\n * This means: bars, lines, scatter points, etc.\n *\n * The plot area is calculated based on the chart dimensions and the offset.\n *\n * @returns Plot area of the chart in pixels, or undefined if used outside a chart context.\n */\nexport var usePlotArea = () => {\n  return useAppSelector(selectPlotArea);\n};\n\n/**\n * Returns the currently active data points being displayed in the Tooltip.\n * Active means that it is currently visible; this hook will return `undefined` if there is no current interaction.\n *\n * This follows the `<Tooltip />` props, if the Tooltip element is present in the chart.\n * If there is no `<Tooltip />` then this hook will follow the default Tooltip props.\n *\n * Data point is whatever you pass as an input to the chart using the `data={}` prop.\n *\n * This returns an array because a chart can have multiple graphical items in it (multiple Lines for example)\n * and tooltip with `shared={true}` will display all items at the same time.\n *\n * Returns undefined when used outside a chart context.\n *\n * @returns Data points that are currently visible in a Tooltip\n */\nexport var useActiveTooltipDataPoints = () => {\n  return useAppSelector(selectActiveTooltipDataPoints);\n};","map":{"version":3,"names":["selectAxisWithScale","useAppSelector","useIsPanorama","selectActiveLabel","selectActiveTooltipDataPoints","selectChartOffset","selectPlotArea","useXAxis","xAxisId","isPanorama","state","useYAxis","yAxisId","useActiveTooltipLabel","useOffset","usePlotArea","useActiveTooltipDataPoints"],"sources":["/Users/amanrana/Desktop/sangeet_restaurant_website/node_modules/recharts/es6/hooks.js"],"sourcesContent":["import { selectAxisWithScale } from './state/selectors/axisSelectors';\nimport { useAppSelector } from './state/hooks';\nimport { useIsPanorama } from './context/PanoramaContext';\nimport { selectActiveLabel, selectActiveTooltipDataPoints } from './state/selectors/tooltipSelectors';\nimport { selectChartOffset } from './state/selectors/selectChartOffset';\nimport { selectPlotArea } from './state/selectors/selectPlotArea';\nexport var useXAxis = xAxisId => {\n  var isPanorama = useIsPanorama();\n  return useAppSelector(state => selectAxisWithScale(state, 'xAxis', xAxisId, isPanorama));\n};\nexport var useYAxis = yAxisId => {\n  var isPanorama = useIsPanorama();\n  return useAppSelector(state => selectAxisWithScale(state, 'yAxis', yAxisId, isPanorama));\n};\n\n/**\n * Returns the active tooltip label. The label is one of the values from the chart data,\n * and is used to display in the tooltip content.\n *\n * Returns undefined if there is no active user interaction or if used outside a chart context\n *\n * @returns string | undefined\n */\nexport var useActiveTooltipLabel = () => {\n  return useAppSelector(selectActiveLabel);\n};\n\n/**\n * Offset defines the blank space between the chart and the plot area.\n * This blank space is occupied by supporting elements like axes, legends, and brushes.\n * This also includes any margins that might be applied to the chart.\n *\n * @returns Offset of the chart in pixels, or undefined if used outside a chart context.\n */\nexport var useOffset = () => {\n  return useAppSelector(selectChartOffset);\n};\n\n/**\n * Plot area is the area where the actual chart data is rendered.\n * This means: bars, lines, scatter points, etc.\n *\n * The plot area is calculated based on the chart dimensions and the offset.\n *\n * @returns Plot area of the chart in pixels, or undefined if used outside a chart context.\n */\nexport var usePlotArea = () => {\n  return useAppSelector(selectPlotArea);\n};\n\n/**\n * Returns the currently active data points being displayed in the Tooltip.\n * Active means that it is currently visible; this hook will return `undefined` if there is no current interaction.\n *\n * This follows the `<Tooltip />` props, if the Tooltip element is present in the chart.\n * If there is no `<Tooltip />` then this hook will follow the default Tooltip props.\n *\n * Data point is whatever you pass as an input to the chart using the `data={}` prop.\n *\n * This returns an array because a chart can have multiple graphical items in it (multiple Lines for example)\n * and tooltip with `shared={true}` will display all items at the same time.\n *\n * Returns undefined when used outside a chart context.\n *\n * @returns Data points that are currently visible in a Tooltip\n */\nexport var useActiveTooltipDataPoints = () => {\n  return useAppSelector(selectActiveTooltipDataPoints);\n};"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,iCAAiC;AACrE,SAASC,cAAc,QAAQ,eAAe;AAC9C,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,iBAAiB,EAAEC,6BAA6B,QAAQ,oCAAoC;AACrG,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,cAAc,QAAQ,kCAAkC;AACjE,OAAO,IAAIC,QAAQ,GAAGC,OAAO,IAAI;EAC/B,IAAIC,UAAU,GAAGP,aAAa,CAAC,CAAC;EAChC,OAAOD,cAAc,CAACS,KAAK,IAAIV,mBAAmB,CAACU,KAAK,EAAE,OAAO,EAAEF,OAAO,EAAEC,UAAU,CAAC,CAAC;AAC1F,CAAC;AACD,OAAO,IAAIE,QAAQ,GAAGC,OAAO,IAAI;EAC/B,IAAIH,UAAU,GAAGP,aAAa,CAAC,CAAC;EAChC,OAAOD,cAAc,CAACS,KAAK,IAAIV,mBAAmB,CAACU,KAAK,EAAE,OAAO,EAAEE,OAAO,EAAEH,UAAU,CAAC,CAAC;AAC1F,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAII,qBAAqB,GAAGA,CAAA,KAAM;EACvC,OAAOZ,cAAc,CAACE,iBAAiB,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIW,SAAS,GAAGA,CAAA,KAAM;EAC3B,OAAOb,cAAc,CAACI,iBAAiB,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIU,WAAW,GAAGA,CAAA,KAAM;EAC7B,OAAOd,cAAc,CAACK,cAAc,CAAC;AACvC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIU,0BAA0B,GAAGA,CAAA,KAAM;EAC5C,OAAOf,cAAc,CAACG,6BAA6B,CAAC;AACtD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}