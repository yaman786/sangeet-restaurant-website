{"ast":null,"code":"// Utility functions for item management\n// Check if an item is new (added within the last 30 minutes)\nexport const isNewItem=createdAt=>{if(!createdAt)return false;const itemTime=new Date(createdAt);const now=new Date();const diffMinutes=(now-itemTime)/(1000*60);return diffMinutes<30;// Show as NEW if less than 30 minutes old\n};// Get time since item was added\nexport const getTimeSinceAdded=createdAt=>{if(!createdAt)return'';const itemTime=new Date(createdAt);const now=new Date();const diffMinutes=Math.floor((now-itemTime)/(1000*60));if(diffMinutes<1)return'Just added';if(diffMinutes===1)return'1 minute ago';if(diffMinutes<60)return\"\".concat(diffMinutes,\" minutes ago\");const diffHours=Math.floor(diffMinutes/60);if(diffHours===1)return'1 hour ago';return\"\".concat(diffHours,\" hours ago\");};// Sort items: new items first, then by creation time\nexport const sortItemsByNewness=items=>{return[...items].sort((a,b)=>{// New items first\nconst aIsNew=isNewItem(a.created_at);const bIsNew=isNewItem(b.created_at);if(aIsNew&&!bIsNew)return-1;if(!aIsNew&&bIsNew)return 1;// Then by creation time (newest first)\nreturn new Date(b.created_at)-new Date(a.created_at);});};// Group items by order sessions (5-minute windows)\nexport const groupItemsBySession=items=>{if(!items||items.length===0)return[];// Sort items by creation time\nconst sortedItems=[...items].sort((a,b)=>new Date(a.created_at)-new Date(b.created_at));const sessions=[];let currentSession={id:1,title:'Original Order',timestamp:new Date(sortedItems[0].created_at),items:[]};sortedItems.forEach((item,index)=>{const itemTime=new Date(item.created_at);const timeDiff=Math.abs(itemTime-currentSession.timestamp)/(1000*60);// minutes\n// If more than 5 minutes difference, start new session\nif(index>0&&timeDiff>5){sessions.push(currentSession);currentSession={id:sessions.length+2,title:\"Added Items\",timestamp:itemTime,items:[]};}currentSession.items.push(item);});sessions.push(currentSession);return sessions;};// Get session title with timestamp\nexport const getSessionTitle=function(session){let isFirst=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;const timeString=session.timestamp.toLocaleTimeString('en-US',{hour:'numeric',minute:'2-digit',hour12:true});if(isFirst){return\"Original Order (\".concat(timeString,\")\");}else{return\"Added Items (\".concat(timeString,\")\");}};// Check if order has multiple sessions (was merged)\nexport const hasMultipleSessions=items=>{const sessions=groupItemsBySession(items);return sessions.length>1;};","map":{"version":3,"names":["isNewItem","createdAt","itemTime","Date","now","diffMinutes","getTimeSinceAdded","Math","floor","concat","diffHours","sortItemsByNewness","items","sort","a","b","aIsNew","created_at","bIsNew","groupItemsBySession","length","sortedItems","sessions","currentSession","id","title","timestamp","forEach","item","index","timeDiff","abs","push","getSessionTitle","session","isFirst","arguments","undefined","timeString","toLocaleTimeString","hour","minute","hour12","hasMultipleSessions"],"sources":["/Users/amanrana/Desktop/sangeet_restaurant_fresh/frontend/src/utils/itemUtils.js"],"sourcesContent":["// Utility functions for item management\n\n// Check if an item is new (added within the last 30 minutes)\nexport const isNewItem = (createdAt) => {\n  if (!createdAt) return false;\n  \n  const itemTime = new Date(createdAt);\n  const now = new Date();\n  const diffMinutes = (now - itemTime) / (1000 * 60);\n  \n  return diffMinutes < 30; // Show as NEW if less than 30 minutes old\n};\n\n// Get time since item was added\nexport const getTimeSinceAdded = (createdAt) => {\n  if (!createdAt) return '';\n  \n  const itemTime = new Date(createdAt);\n  const now = new Date();\n  const diffMinutes = Math.floor((now - itemTime) / (1000 * 60));\n  \n  if (diffMinutes < 1) return 'Just added';\n  if (diffMinutes === 1) return '1 minute ago';\n  if (diffMinutes < 60) return `${diffMinutes} minutes ago`;\n  \n  const diffHours = Math.floor(diffMinutes / 60);\n  if (diffHours === 1) return '1 hour ago';\n  return `${diffHours} hours ago`;\n};\n\n// Sort items: new items first, then by creation time\nexport const sortItemsByNewness = (items) => {\n  return [...items].sort((a, b) => {\n    // New items first\n    const aIsNew = isNewItem(a.created_at);\n    const bIsNew = isNewItem(b.created_at);\n    \n    if (aIsNew && !bIsNew) return -1;\n    if (!aIsNew && bIsNew) return 1;\n    \n    // Then by creation time (newest first)\n    return new Date(b.created_at) - new Date(a.created_at);\n  });\n};\n\n// Group items by order sessions (5-minute windows)\nexport const groupItemsBySession = (items) => {\n  if (!items || items.length === 0) return [];\n  \n  // Sort items by creation time\n  const sortedItems = [...items].sort((a, b) => \n    new Date(a.created_at) - new Date(b.created_at)\n  );\n  \n  const sessions = [];\n  let currentSession = {\n    id: 1,\n    title: 'Original Order',\n    timestamp: new Date(sortedItems[0].created_at),\n    items: []\n  };\n  \n  sortedItems.forEach((item, index) => {\n    const itemTime = new Date(item.created_at);\n    const timeDiff = Math.abs(itemTime - currentSession.timestamp) / (1000 * 60); // minutes\n    \n    // If more than 5 minutes difference, start new session\n    if (index > 0 && timeDiff > 5) {\n      sessions.push(currentSession);\n      currentSession = {\n        id: sessions.length + 2,\n        title: `Added Items`,\n        timestamp: itemTime,\n        items: []\n      };\n    }\n    \n    currentSession.items.push(item);\n  });\n  \n  sessions.push(currentSession);\n  return sessions;\n};\n\n// Get session title with timestamp\nexport const getSessionTitle = (session, isFirst = false) => {\n  const timeString = session.timestamp.toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true\n  });\n  \n  if (isFirst) {\n    return `Original Order (${timeString})`;\n  } else {\n    return `Added Items (${timeString})`;\n  }\n};\n\n// Check if order has multiple sessions (was merged)\nexport const hasMultipleSessions = (items) => {\n  const sessions = groupItemsBySession(items);\n  return sessions.length > 1;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}