{"ast":null,"code":"/**\n * Cart Management Utilities\n * Functions for managing cart data across the application\n *//**\n * Clear all cart-related data from localStorage for a specific QR code\n * @param {string} qrCode - The QR code identifier\n * @param {string} tableNumber - The table number (optional, for additional clearing)\n */export const clearCartData=function(qrCode){let tableNumber=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{console.log('🧹 Clearing cart data for QR code:',qrCode);// Clear all possible cart-related localStorage keys\nlocalStorage.removeItem(\"cart_\".concat(qrCode));localStorage.removeItem(\"customer_\".concat(qrCode));localStorage.removeItem(\"instructions_\".concat(qrCode));// Also clear any table-based keys that might exist\nif(tableNumber){localStorage.removeItem(\"cart_\".concat(tableNumber));localStorage.removeItem(\"customer_\".concat(tableNumber));localStorage.removeItem(\"instructions_\".concat(tableNumber));}// Clear any other potential variations\nlocalStorage.removeItem(\"cart_table_\".concat(tableNumber));localStorage.removeItem(\"customer_table_\".concat(tableNumber));localStorage.removeItem(\"instructions_table_\".concat(tableNumber));console.log('✅ Cart data cleared successfully');return true;}catch(error){console.error('❌ Error clearing cart data:',error);return false;}};/**\n * Clear cart data for all possible QR codes and table numbers\n * This is used when an order is deleted and we need to clear all cart data\n */export const clearAllCartData=()=>{try{console.log('🧹 Clearing ALL cart data from localStorage');const keysToRemove=[];// Find all cart-related keys\nfor(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key&&(key.includes('cart')||key.includes('customer')||key.includes('instructions'))){keysToRemove.push(key);}}// Remove all found keys\nkeysToRemove.forEach(key=>{localStorage.removeItem(key);console.log(\"\\uD83D\\uDDD1\\uFE0F Removed: \".concat(key));});console.log(\"\\u2705 Cleared \".concat(keysToRemove.length,\" cart-related keys\"));return true;}catch(error){console.error('❌ Error clearing all cart data:',error);return false;}};/**\n * Get all cart-related localStorage keys for debugging\n * @param {string} qrCode - The QR code identifier\n * @param {string} tableNumber - The table number (optional)\n */export const getCartDebugInfo=function(qrCode){let tableNumber=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;const debugInfo={qrCode,tableNumber,localStorageKeys:[],cartData:null,customerData:null,instructionsData:null};// Get all localStorage keys\nfor(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key&&(key.includes('cart')||key.includes('customer')||key.includes('instructions'))){debugInfo.localStorageKeys.push({key,value:localStorage.getItem(key)});}}// Get specific cart data\ndebugInfo.cartData=localStorage.getItem(\"cart_\".concat(qrCode));debugInfo.customerData=localStorage.getItem(\"customer_\".concat(qrCode));debugInfo.instructionsData=localStorage.getItem(\"instructions_\".concat(qrCode));if(tableNumber){debugInfo.tableCartData=localStorage.getItem(\"cart_\".concat(tableNumber));debugInfo.tableCustomerData=localStorage.getItem(\"customer_\".concat(tableNumber));debugInfo.tableInstructionsData=localStorage.getItem(\"instructions_\".concat(tableNumber));}return debugInfo;};/**\n * Extract QR code from current URL\n * @returns {string|null} QR code or null if not found\n */export const getQRCodeFromURL=()=>{const pathname=window.location.pathname;const qrMatch=pathname.match(/\\/qr\\/([^\\/]+)/);return qrMatch?qrMatch[1]:null;};/**\n * Extract table number from URL parameters\n * @returns {string|null} Table number or null if not found\n */export const getTableNumberFromURL=()=>{const urlParams=new URLSearchParams(window.location.search);return urlParams.get('table');};","map":{"version":3,"names":["clearCartData","qrCode","tableNumber","arguments","length","undefined","console","log","localStorage","removeItem","concat","error","clearAllCartData","keysToRemove","i","key","includes","push","forEach","getCartDebugInfo","debugInfo","localStorageKeys","cartData","customerData","instructionsData","value","getItem","tableCartData","tableCustomerData","tableInstructionsData","getQRCodeFromURL","pathname","window","location","qrMatch","match","getTableNumberFromURL","urlParams","URLSearchParams","search","get"],"sources":["/Users/amanrana/Desktop/sangeet_restaurant_website/frontend/src/utils/cartUtils.js"],"sourcesContent":["/**\n * Cart Management Utilities\n * Functions for managing cart data across the application\n */\n\n/**\n * Clear all cart-related data from localStorage for a specific QR code\n * @param {string} qrCode - The QR code identifier\n * @param {string} tableNumber - The table number (optional, for additional clearing)\n */\nexport const clearCartData = (qrCode, tableNumber = null) => {\n  try {\n    console.log('🧹 Clearing cart data for QR code:', qrCode);\n    \n    // Clear all possible cart-related localStorage keys\n    localStorage.removeItem(`cart_${qrCode}`);\n    localStorage.removeItem(`customer_${qrCode}`);\n    localStorage.removeItem(`instructions_${qrCode}`);\n    \n    // Also clear any table-based keys that might exist\n    if (tableNumber) {\n      localStorage.removeItem(`cart_${tableNumber}`);\n      localStorage.removeItem(`customer_${tableNumber}`);\n      localStorage.removeItem(`instructions_${tableNumber}`);\n    }\n    \n    // Clear any other potential variations\n    localStorage.removeItem(`cart_table_${tableNumber}`);\n    localStorage.removeItem(`customer_table_${tableNumber}`);\n    localStorage.removeItem(`instructions_table_${tableNumber}`);\n    \n    console.log('✅ Cart data cleared successfully');\n    return true;\n  } catch (error) {\n    console.error('❌ Error clearing cart data:', error);\n    return false;\n  }\n};\n\n/**\n * Clear cart data for all possible QR codes and table numbers\n * This is used when an order is deleted and we need to clear all cart data\n */\nexport const clearAllCartData = () => {\n  try {\n    console.log('🧹 Clearing ALL cart data from localStorage');\n    \n    const keysToRemove = [];\n    \n    // Find all cart-related keys\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && (key.includes('cart') || key.includes('customer') || key.includes('instructions'))) {\n        keysToRemove.push(key);\n      }\n    }\n    \n    // Remove all found keys\n    keysToRemove.forEach(key => {\n      localStorage.removeItem(key);\n      console.log(`🗑️ Removed: ${key}`);\n    });\n    \n    console.log(`✅ Cleared ${keysToRemove.length} cart-related keys`);\n    return true;\n  } catch (error) {\n    console.error('❌ Error clearing all cart data:', error);\n    return false;\n  }\n};\n\n/**\n * Get all cart-related localStorage keys for debugging\n * @param {string} qrCode - The QR code identifier\n * @param {string} tableNumber - The table number (optional)\n */\nexport const getCartDebugInfo = (qrCode, tableNumber = null) => {\n  const debugInfo = {\n    qrCode,\n    tableNumber,\n    localStorageKeys: [],\n    cartData: null,\n    customerData: null,\n    instructionsData: null\n  };\n  \n  // Get all localStorage keys\n  for (let i = 0; i < localStorage.length; i++) {\n    const key = localStorage.key(i);\n    if (key && (key.includes('cart') || key.includes('customer') || key.includes('instructions'))) {\n      debugInfo.localStorageKeys.push({\n        key,\n        value: localStorage.getItem(key)\n      });\n    }\n  }\n  \n  // Get specific cart data\n  debugInfo.cartData = localStorage.getItem(`cart_${qrCode}`);\n  debugInfo.customerData = localStorage.getItem(`customer_${qrCode}`);\n  debugInfo.instructionsData = localStorage.getItem(`instructions_${qrCode}`);\n  \n  if (tableNumber) {\n    debugInfo.tableCartData = localStorage.getItem(`cart_${tableNumber}`);\n    debugInfo.tableCustomerData = localStorage.getItem(`customer_${tableNumber}`);\n    debugInfo.tableInstructionsData = localStorage.getItem(`instructions_${tableNumber}`);\n  }\n  \n  return debugInfo;\n};\n\n/**\n * Extract QR code from current URL\n * @returns {string|null} QR code or null if not found\n */\nexport const getQRCodeFromURL = () => {\n  const pathname = window.location.pathname;\n  const qrMatch = pathname.match(/\\/qr\\/([^\\/]+)/);\n  return qrMatch ? qrMatch[1] : null;\n};\n\n/**\n * Extract table number from URL parameters\n * @returns {string|null} Table number or null if not found\n */\nexport const getTableNumberFromURL = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get('table');\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,GAEA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,aAAa,CAAG,QAAAA,CAACC,MAAM,CAAyB,IAAvB,CAAAC,WAAW,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACtD,GAAI,CACFG,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAEN,MAAM,CAAC,CAEzD;AACAO,YAAY,CAACC,UAAU,SAAAC,MAAA,CAAST,MAAM,CAAE,CAAC,CACzCO,YAAY,CAACC,UAAU,aAAAC,MAAA,CAAaT,MAAM,CAAE,CAAC,CAC7CO,YAAY,CAACC,UAAU,iBAAAC,MAAA,CAAiBT,MAAM,CAAE,CAAC,CAEjD;AACA,GAAIC,WAAW,CAAE,CACfM,YAAY,CAACC,UAAU,SAAAC,MAAA,CAASR,WAAW,CAAE,CAAC,CAC9CM,YAAY,CAACC,UAAU,aAAAC,MAAA,CAAaR,WAAW,CAAE,CAAC,CAClDM,YAAY,CAACC,UAAU,iBAAAC,MAAA,CAAiBR,WAAW,CAAE,CAAC,CACxD,CAEA;AACAM,YAAY,CAACC,UAAU,eAAAC,MAAA,CAAeR,WAAW,CAAE,CAAC,CACpDM,YAAY,CAACC,UAAU,mBAAAC,MAAA,CAAmBR,WAAW,CAAE,CAAC,CACxDM,YAAY,CAACC,UAAU,uBAAAC,MAAA,CAAuBR,WAAW,CAAE,CAAC,CAE5DI,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC,CAC/C,MAAO,KAAI,CACb,CAAE,MAAOI,KAAK,CAAE,CACdL,OAAO,CAACK,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,gBAAgB,CAAGA,CAAA,GAAM,CACpC,GAAI,CACFN,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC,CAE1D,KAAM,CAAAM,YAAY,CAAG,EAAE,CAEvB;AACA,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGN,YAAY,CAACJ,MAAM,CAAEU,CAAC,EAAE,CAAE,CAC5C,KAAM,CAAAC,GAAG,CAAGP,YAAY,CAACO,GAAG,CAACD,CAAC,CAAC,CAC/B,GAAIC,GAAG,GAAKA,GAAG,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAID,GAAG,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAID,GAAG,CAACC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAE,CAC7FH,YAAY,CAACI,IAAI,CAACF,GAAG,CAAC,CACxB,CACF,CAEA;AACAF,YAAY,CAACK,OAAO,CAACH,GAAG,EAAI,CAC1BP,YAAY,CAACC,UAAU,CAACM,GAAG,CAAC,CAC5BT,OAAO,CAACC,GAAG,gCAAAG,MAAA,CAAiBK,GAAG,CAAE,CAAC,CACpC,CAAC,CAAC,CAEFT,OAAO,CAACC,GAAG,mBAAAG,MAAA,CAAcG,YAAY,CAACT,MAAM,sBAAoB,CAAC,CACjE,MAAO,KAAI,CACb,CAAE,MAAOO,KAAK,CAAE,CACdL,OAAO,CAACK,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CACvD,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAQ,gBAAgB,CAAG,QAAAA,CAAClB,MAAM,CAAyB,IAAvB,CAAAC,WAAW,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACzD,KAAM,CAAAiB,SAAS,CAAG,CAChBnB,MAAM,CACNC,WAAW,CACXmB,gBAAgB,CAAE,EAAE,CACpBC,QAAQ,CAAE,IAAI,CACdC,YAAY,CAAE,IAAI,CAClBC,gBAAgB,CAAE,IACpB,CAAC,CAED;AACA,IAAK,GAAI,CAAAV,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGN,YAAY,CAACJ,MAAM,CAAEU,CAAC,EAAE,CAAE,CAC5C,KAAM,CAAAC,GAAG,CAAGP,YAAY,CAACO,GAAG,CAACD,CAAC,CAAC,CAC/B,GAAIC,GAAG,GAAKA,GAAG,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAID,GAAG,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAID,GAAG,CAACC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAE,CAC7FI,SAAS,CAACC,gBAAgB,CAACJ,IAAI,CAAC,CAC9BF,GAAG,CACHU,KAAK,CAAEjB,YAAY,CAACkB,OAAO,CAACX,GAAG,CACjC,CAAC,CAAC,CACJ,CACF,CAEA;AACAK,SAAS,CAACE,QAAQ,CAAGd,YAAY,CAACkB,OAAO,SAAAhB,MAAA,CAAST,MAAM,CAAE,CAAC,CAC3DmB,SAAS,CAACG,YAAY,CAAGf,YAAY,CAACkB,OAAO,aAAAhB,MAAA,CAAaT,MAAM,CAAE,CAAC,CACnEmB,SAAS,CAACI,gBAAgB,CAAGhB,YAAY,CAACkB,OAAO,iBAAAhB,MAAA,CAAiBT,MAAM,CAAE,CAAC,CAE3E,GAAIC,WAAW,CAAE,CACfkB,SAAS,CAACO,aAAa,CAAGnB,YAAY,CAACkB,OAAO,SAAAhB,MAAA,CAASR,WAAW,CAAE,CAAC,CACrEkB,SAAS,CAACQ,iBAAiB,CAAGpB,YAAY,CAACkB,OAAO,aAAAhB,MAAA,CAAaR,WAAW,CAAE,CAAC,CAC7EkB,SAAS,CAACS,qBAAqB,CAAGrB,YAAY,CAACkB,OAAO,iBAAAhB,MAAA,CAAiBR,WAAW,CAAE,CAAC,CACvF,CAEA,MAAO,CAAAkB,SAAS,CAClB,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAU,gBAAgB,CAAGA,CAAA,GAAM,CACpC,KAAM,CAAAC,QAAQ,CAAGC,MAAM,CAACC,QAAQ,CAACF,QAAQ,CACzC,KAAM,CAAAG,OAAO,CAAGH,QAAQ,CAACI,KAAK,CAAC,gBAAgB,CAAC,CAChD,MAAO,CAAAD,OAAO,CAAGA,OAAO,CAAC,CAAC,CAAC,CAAG,IAAI,CACpC,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAE,qBAAqB,CAAGA,CAAA,GAAM,CACzC,KAAM,CAAAC,SAAS,CAAG,GAAI,CAAAC,eAAe,CAACN,MAAM,CAACC,QAAQ,CAACM,MAAM,CAAC,CAC7D,MAAO,CAAAF,SAAS,CAACG,GAAG,CAAC,OAAO,CAAC,CAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}